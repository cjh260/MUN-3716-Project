package graphics;

import game.GameControllerInterface;
import game.GameModelInterface;

import java.awt.event.ActionEvent;

import javax.swing.JOptionPane;

import player.Player;
import board.Territory;

public class ActionBar extends javax.swing.JPanel {

    private GameControllerInterface controller;
    private GameModelInterface model;
    
    private javax.swing.JButton moveButton;
    private javax.swing.JButton tradeButton;
    private javax.swing.JButton mailButton;
    private javax.swing.JButton countryButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton governmentButton;
    private javax.swing.JButton inventoryButton;
    
    /**
     * Creates new form ActionBar
     */
    public ActionBar(GameControllerInterface c, GameModelInterface m) {
        this.controller = c;
        this.model = m;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        moveButton = new javax.swing.JButton();
        tradeButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        countryButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        governmentButton = new javax.swing.JButton();
        inventoryButton = new javax.swing.JButton();

        moveButton.setText("Move");
        moveButton.setToolTipText("Move your character to selected territory.");
        moveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtonActionPerformed(evt);
            }
        });

        tradeButton.setText("Trade");
        tradeButton.setToolTipText("Trade items or currency with nearby player.");

        mailButton.setText("Mail");
        mailButton.setToolTipText("Send and recive messages.");

        countryButton.setText("Country");
        countryButton.setToolTipText("Open country controll menu.");

        helpButton.setText("Help");
        helpButton.setToolTipText("Open help menu.");

        quitButton.setText("Quit");
        quitButton.setToolTipText("Save and quit the game.");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        governmentButton.setText("Govenment");
        governmentButton.setToolTipText("Open govenment controll menu.");

        inventoryButton.setText("Inventory");
        inventoryButton.setToolTipText("Open inventory window.");

        java.awt.FlowLayout layout = new java.awt.FlowLayout();
        this.setLayout(layout);
        this.add(moveButton);
        this.add(tradeButton);
        this.add(inventoryButton);
        this.add(mailButton);
        this.add(countryButton);
        this.add(governmentButton);
        this.add(helpButton);
        this.add(quitButton);
    }

    private void quitButtonActionPerformed(ActionEvent evt) {
        controller.quitGame();
    }
    
    private void moveButtonActionPerformed(ActionEvent evt) {
        Player p = controller.getActivePlayer();
        Territory to = controller.getSelectedTerritory();
        
        try {
            controller.movePlayer(p, to);
        } catch (UnsupportedOperationException e) {
            JOptionPane.showMessageDialog(this.getParent(), "Must move to a neighboring territory.");
        }
        
    }
}
